// Тест-метод обработки внешних запросов системы управления
// версиями: github.com, gitlab.com и другие. Этот сценарий установлен
// в настройках системы как ответственный за обслуживание запросов
// веб-сервиса Hook.

// Получаем данные внешнего запроса
данные = данныеЗапроса ( _ );

// В зависимости от идентификатора тестируемой конфигурации
// организуем логику тестирования
проект = данные.Приложение;
если ( проект = "ERP2" ) тогда
	// Создаем задание для запуска тестов ERP2.
	// Подробнее о работе метода СоздатьЗадание см. в документации
	СоздатьЗадание ( "Тестер", "ЗапуститьERP2тесты", проект, , , данные.Комментарий );
иначеесли ( проект = "CommonTests" ) тогда
	СоздатьЗадание ( "Тестер", "Групповые.ОбновитьОбщиеТесты", , , , данные.Комментарий );
иначе
	вызватьисключение "Запрос на обновление " + проект + " не был обработан";
конецесли;

&НаСервере
Функция данныеЗапроса ( Параметры )

	// Получим внешний запрос в виде структуры
	п = Conversion.FromJSON ( Параметры.Body );
	данные = новый Структура ( "Сервис, Приложение, Комментарий" );
	сервис = кто ( Параметры );
	данные.Сервис = сервис;
	// В зависимости от используемого сервиса, делаем разбор переданных параметров
	если ( сервис = gitlab () ) тогда
		// gitlab в самом запросе содержит информацию о помещениях.
		// Детали см. в документации:
		// https://gitlab.com/help/user/project/integrations/webhooks
		заметки = новый Массив ();
		для каждого помещение из п.commits цикл
			заметки.Добавить ( помещение.author.name + ": " );
			для каждого запись из СтрРазделить ( помещение.message, Chars.LF ) цикл
				если ( не ПустаяСтрока ( запись ) ) тогда
					заметки.Добавить ( запись + ";" );
				конецесли;
			конеццикла;
		конеццикла;
		данные.Комментарий = СтрСоединить ( заметки );
		данные.Приложение = п.project.name;
	иначеесли ( сервис = github () ) тогда
		// github не передаем в запросе информацию о помещениях.
		// для их получения нужно использовать web-api (выходит за рамки этого сценария)
		// Детали см. в документации:
		// https://developer.github.com/webhooks/
		данные.Комментарий = п.sender.login;
		данные.Приложение = п.repository.name;
	конецесли;
	возврат данные; 

КонецФункции

&НаСервере
Функция github ()

	возврат "github";

КонецФункции

&НаСервере
Функция gitlab ()

	возврат "gitlab";

КонецФункции

&НаСервере
Функция кто ( Параметры )

	заголовок = Параметры.Headers;
	// По переданному заголовку определяем источник запроса
	если ( заголовок.Получить ( "X-GitHub-Event" ) <> неопределено ) тогда
		возврат github ();
	иначеесли ( заголовок.Получить ( "X-Gitlab-Event" ) <> неопределено ) тогда
		возврат gitlab ();
	иначе
		вызватьисключение "Неопознанный запрос на обновление: " + Conversion.ToJSON ( Параметры.Body );
	конецесли;

КонецФункции
